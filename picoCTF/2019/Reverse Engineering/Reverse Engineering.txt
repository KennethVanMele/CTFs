vault-door-training: Open the file and find flag at the bottom.

vault-door-1: sort:
password.charAt(0)  == 'd' &&
password.charAt(1)  == '3' &&
password.charAt(2)  == '5' &&
password.charAt(3)  == 'c' &&
password.charAt(4)  == 'r' &&
password.charAt(5)  == '4' &&
password.charAt(6)  == 'm' &&
password.charAt(7)  == 'b' &&
password.charAt(8)  == 'l' &&
password.charAt(9)  == '3' &&
password.charAt(10) == '_' &&
password.charAt(11) == 't' &&
password.charAt(12) == 'H' &&
password.charAt(13) == '3' &&
password.charAt(14) == '_' &&
password.charAt(15) == 'c' &&
password.charAt(16) == 'H' &&
password.charAt(17) == '4' &&
password.charAt(18) == 'r' &&
password.charAt(19) == '4' &&
password.charAt(20) == 'c' &&
password.charAt(21) == 'T' &&
password.charAt(22) == '3' &&
password.charAt(23) == 'r' &&
password.charAt(24) == '5' &&
password.charAt(25) == '_' &&
password.charAt(26) == '6' &&
password.charAt(27) == '3' &&
password.charAt(28) == 'e' &&
password.charAt(29) == 'f' &&
password.charAt(30) == '3' &&
password.charAt(31) == 'a';

asm1:
ebp = 0x2e0
cmp = compare(0x2e0, 0x3fb)
jg = jumpgreater == false => next
compare (0x2e0, 0x280)
jne = jump not equil == true => jump to asm1+29
mov ebp to eax
sub = subtract(0x2e0, 0xa) => python: hex(0x2e0 - 0xa)