vault-door-training: Open the file and find flag at the bottom.

vault-door-1: sort:
password.charAt(0)  == 'd' &&
password.charAt(1)  == '3' &&
password.charAt(2)  == '5' &&
password.charAt(3)  == 'c' &&
password.charAt(4)  == 'r' &&
password.charAt(5)  == '4' &&
password.charAt(6)  == 'm' &&
password.charAt(7)  == 'b' &&
password.charAt(8)  == 'l' &&
password.charAt(9)  == '3' &&
password.charAt(10) == '_' &&
password.charAt(11) == 't' &&
password.charAt(12) == 'H' &&
password.charAt(13) == '3' &&
password.charAt(14) == '_' &&
password.charAt(15) == 'c' &&
password.charAt(16) == 'H' &&
password.charAt(17) == '4' &&
password.charAt(18) == 'r' &&
password.charAt(19) == '4' &&
password.charAt(20) == 'c' &&
password.charAt(21) == 'T' &&
password.charAt(22) == '3' &&
password.charAt(23) == 'r' &&
password.charAt(24) == '5' &&
password.charAt(25) == '_' &&
password.charAt(26) == '6' &&
password.charAt(27) == '3' &&
password.charAt(28) == 'e' &&
password.charAt(29) == 'f' &&
password.charAt(30) == '3' &&
password.charAt(31) == 'a';

asm1:
ebp = 0x2e0
cmp = compare(0x2e0, 0x3fb)
jg = jumpgreater == false => next
compare (0x2e0, 0x280)
jne = jump not equil == true => jump to asm1+29
mov ebp to eax
sub = subtract(0x2e0, 0xa) => python: hex(0x2e0 - 0xa)

asm2:
translate to python meta code

Vaultdoor4: python2 can convert to bytearray

droids0: open in android studio.

vaultdoor5: base64 -> url

reverse_cipher: same as Investigative Reversing 0

droids1:
java code is stored in .dex file but not readable by android studio
open in jadx
In main you find buttonClick which calls getFlag, follow it to FlagstaffHill.
It uses R.string.password: the value here is not the passord but the resource number
Open resources.arsc -> res -> values -> strings.xml
Enter the password in android studio

vaultdoor6:
(passBytes[i] ^ 0x55) - myBytes[i]) != 0): x - y != 0 just means == so you can rewrite to:
(passBytes[i] ^ 0x55) != myBytes[i])) so basically just XOR myBites with 0x55

asm4:
to long so translate to c code.
follow:
https://largecats.github.io/blog/2019/09/22/run-c-from-wsl-in-vs-code/
edit to: gcc -masm=intel -m32 solution.c -o solution

Need for speed:
When we look at the main function and follow it to print_flag we see we need a key.
The function called befor print_flag is get_key which in turn uses calculate key.
This is just a timer that runs very slower then the one set in set_timer.
Let's run it in gdb to skip the timer:
gdb ./need-for-speed
break set_timer #sets breakpoint
r #run the program
return #return empty (accept with y)
step #continue

Flag Hunters:
We get the source code. When we print out song_lines, we can see that object 0 contains our flag.
The script starts at [VERSE1] which is object 1 however...
Luckely we get a chanse to sing along:
      elif re.match(r"CROWD.*", line):
        crowd = input('Crowd: ')
        song_lines[lip] = 'Crowd: ' + crowd
        lip += 1
This code isn't sanitized, so let's try pass ";RETURN 0"
; is the delimiter and RETURN gives us a specific verse because of:
      elif re.match(r"RETURN [0-9]+", line):
        lip = int(line.split()[1])	
Important! No space between ";" and "RETURN"!