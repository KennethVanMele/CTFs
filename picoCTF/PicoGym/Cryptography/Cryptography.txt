Mod26: rot13

13: https://rot13.com/

Easy1:
cypher: UFJKXQZQUNB
Key:	SOLVECRYPTO

Go to row S -> find U -> get colomn C etc.

caesar: https://rot13.com/ -> rot4

flags: just google it (https://lh3.googleusercontent.com/proxy/OMLBlV7A5xDIC05yneeG5SIZjv60yrYo4PRsMkn7AtqWoqR0XcoTu6nL1Y2HGaOwVWYFw3Tpo7ZDWt663BMjHXi2NdVi9dR-Pw)

Tapping: https://morsecode.world/international/translator.html

la cifra de: https://www.guballa.de/vigenere-solver


rsa-pop-quiz:
1) n=p*q
2) q=n/p
3) not feasable: 2049 bits long
4) totient(n) = φ(n) = (p − 1)(q − 1)
5) C = m^e (mod n) -> python = pow(m, e, n)
6) no: you need p and q
7) get-d.py
8) decypherRSA.py

waves over lambda: just google substitution cipher breaker

miniRSA:
normaly c = m ** e % N, but if e is very small c < N so the modulo cancels out so c becomes m ** e
use gmpy2 to keep precision

b00tl3gRSA2:
Discription gives us e>d when you google this you find Wieners attack.
I used owiener

interencdec:
This is base64  decoded = base64.b64decode('YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclgyMHdNakV5TnpVNGZRPT0nCg==')
This results in base 64 again but python adds some stuff: decoded = decoded.decode('UTF-8').strip()[2:len(decoded)-2]
base64 again which results in a caesar cypher.
It's easier to use cyberchef to find ROT19
