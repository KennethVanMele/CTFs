Insp3ct0r: inspect element -> sourcesdont-use-client-side: in javascript: order ifs:if (checkpass.substring(0, split) == 'pico') {if (checkpass.substring(split, split*2) == 'CTF{') {if (checkpass.substring(split*2, split*3) == 'no_c') {if (checkpass.substring(split*3, split*4) == 'lien') {if (checkpass.substring(split*4, split*5) == 'ts_p') {if (checkpass.substring(split*5, split*6) == 'lz_c') {if (checkpass.substring(split*6, split*7) == 'e22d') {if (checkpass.substring(split*7, split*8) == 'c}') {where are the robots:1) go to: https://2019shell1.picoctf.com/problem/32229/robots.txt2) go to: https://2019shell1.picoctf.com/problem/32229//0ecd0.htmllogon:1) login with anything2) inpect element -> network -> flag -> cookies3) change admin from false to true: application -> cookiespico browser:1) open site2) press f12 and click "toggle device toolbar"3) dimensions: edit4) add custom device: picobrowserclient-side-again:1) open javascript: format by clicking {}2) replace "split" with 0x43) do math to get order (hex!)4) run in console: _0x4b5b('0x3') etc5) transcribe (redundancy)Open-to-admins:1) inspect element -> application -> cookies2) in console: document.cookie="admin=True"3) in console: document.cookie="time=1400"4) refresh pageIrish-Name-Repo 1:if you try stuff like '"- the page will crash -> this points to SQLinjectionpayload 'OR 1 = 1 -- <- space here!Irish-Name-Repo 2:It keeps "detecting" SQLiThe SQL probably looks like: SELECT * From users WHRER u='' and p='';So we have to trick it into giving evrything for "Admin"Just "admin' -- " works because "-- " is a comment so it ignores "and p=''"Irish-Name-Repo 3:' breaks the login -> Error 500Most injection tests go to 500, except "' -- " this goes to "login failed".SQLMap also reports 35 time ERROR 500.Setting the debug value to true using devtools reveals the query to be: SELECT * FROM admin where password = '''So put ' or password != ' to inject (put debug back to 1)There is a ROT13 happening: ' be cnffjbeq != ' so put this in.JaWT Scratchpad:URL doesn't change when you login so check cookies.On the JWT site (jwt.io) you can decode the jwt cookie. It uses HMACSHA256 so we need a passwordjohn ./jwt.txt --format=HMAC-SHA256 --wordlist=./wordlists/rockyou.txtput in the password and change username to admin on jwt.iochange cookieJava Script Kiddie:There is a script in the site code that tries to convert our string to a PNG but failsIt calls "bytes" -> you can see the bytes by changing ?# to bytesthe bytes are shifted aroundWe know the first 8 as they are always the same: 89 50 4e 47 0d 0a 1a 0aWe also know the next 8: the length of the header (always 13) and the name (IHDR) giving: 00 00 00 0D 49 48 44 52You can find the last part by opening any PNG in a hex editor or use hex(ord("I")) in pythonjava-script-kiddie.py gives all possible options for the key, because they ar limited we can test them 1 by 1